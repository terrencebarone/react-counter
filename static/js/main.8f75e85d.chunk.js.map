{"version":3,"sources":["App.js","index.js"],"names":["App","useEffect","counterFromLS","Number","localStorage","getItem","setCounter","useState","counter","setCounterWithValue","value","inputVal","setInputVal","setItem","toString","counterIsLive","setCounterIsLive","setTimeout","className","onClick","onChange","e","target","isNaN","ReactDOM","render","document","getElementById"],"mappings":"yNAiFeA,MA9Ef,WAKEC,qBAAU,WAER,IAAMC,EAAgBC,OAAOC,aAAaC,QAAQ,YAC/CH,GACDI,EAAWJ,KAEb,IAXW,MAckBK,mBAAS,GAd3B,mBAcNC,EAdM,KAcIF,EAdJ,KAkBPG,EAAsB,SAACC,GAAD,OAAW,WACrCJ,EAAWI,KAnBA,EAsBkBH,mBAAS,IAtB3B,mBAsBPI,EAtBO,KAsBGC,EAtBH,KAwCbX,qBAAU,WACRG,aAAaS,QAAQ,UAAWL,EAAQM,cACxC,CAACN,IA1CU,MA6C4BD,oBAAS,GA7CrC,mBA6CPQ,EA7CO,KA6CQC,EA7CR,KA2Db,OARAf,qBAAU,WACLc,GACDE,YAAW,WACTX,EAAWE,EAAQ,KAClB,OAEL,CAACA,EAAQO,IAGT,sBAAKG,UAAU,MAAf,UACI,oBAAIA,UAAU,gBAAd,SAA+BV,IAC/B,sBAAKU,UAAU,kBAAf,UACE,wBAAQC,QAAUV,EAAoBD,EAAQ,GAA9C,gBACA,wBAAQW,QAAUV,EAAoB,GAAtC,mBACA,wBAAQU,QAAUV,EAAoBD,EAAQ,GAA9C,mBAEF,sBAAKU,UAAU,iBAAf,UACE,uBAAOE,SA5CW,SAACC,GACzBT,EAAYS,EAAEC,OAAOZ,QA2CqBA,MAAOC,IAC3C,wBAAQQ,QAzCc,WAC5B,IAAMT,EAAQP,OAAOQ,GAClBY,MAAMb,IAIPJ,EAAWI,GAHXE,EAAY,KAsCR,uBAEF,qBAAKM,UAAU,iBAAf,SACE,yBAAQC,QAzBM,WAClBH,GAAkBD,IAwBd,UAAkCA,EAAgB,OAAS,QAA3D,oBCrEVS,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.8f75e85d.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  //useEffect takes two arguements\n  //The first argument is a function that will always run in the begining.\n  //The second is a dependency that will cause you useEffect to run the function again\n  //the dependencies will be in an array\n  useEffect(()=> {\n    //this useEffect checks to see if we have 'counter' in localstorage\n    const counterFromLS = Number(localStorage.getItem('counter'));\n    if(counterFromLS){\n      setCounter(counterFromLS);\n    }\n  },[]);\n\n  //useState returns two items. The value(state) and the function that updates state\n  const [counter , setCounter] = useState(0);\n  //setCounterWithValue is a reference to a function that calls another function\n  //which changes the counter using the setCounter. The reason is so that\n  //once page renders it does not automatically run the function.\n  const setCounterWithValue = (value) => () => {\n    setCounter(value);\n  }\n  //this useState is used to see what user is inputing\n  const[inputVal, setInputVal] = useState('');\n  //using onChange for input JSX you can set the value user is typing and update inputVal\n  const handleInputChange = (e) => {\n    setInputVal(e.target.value);\n  }\n  //used to update counterNumber\n  const handleUpdateWithInput = () => {\n    const value = Number(inputVal);\n    if(isNaN(value)){\n      setInputVal('');\n    }\n    else{\n      setCounter(value);\n      setInputVal('');\n    }\n  }\n  \n  //Whenever counter is updated than set 'counter' in local storage to new countNum\n  useEffect(()=>{\n    localStorage.setItem('counter', counter.toString());\n  },[counter]);\n\n  //state that determines if start counter is live or not \n  const[counterIsLive, setCounterIsLive] = useState(false);\n  //used to update button from start to stop\n  const handleCounter = () => {\n      setCounterIsLive(!counterIsLive)\n  }\n  //used to update counter every second\n  useEffect(()=> {\n    if(counterIsLive){\n      setTimeout(()=>{\n        setCounter(counter+1);\n      } ,1000);\n    }\n  },[counter,counterIsLive]);\n\n  return (\n    <div className=\"App\">\n        <h1 className=\"counterNumber\">{counter}</h1>\n        <div className=\"manual-controls\">\n          <button onClick= {setCounterWithValue(counter-1)} >-1</button>\n          <button onClick= {setCounterWithValue(0)} >Reset</button>\n          <button onClick= {setCounterWithValue(counter+1)} >+1</button>\n        </div>\n        <div className=\"input-controls\">\n          <input onChange={handleInputChange} value={inputVal}/>\n          <button onClick={handleUpdateWithInput} >Update</button>\n        </div>\n        <div className=\"timer-controls\">\n          <button onClick={handleCounter} >{counterIsLive ? \"Stop\" : \"Start\"} Counter</button>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}